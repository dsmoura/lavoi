CREATE TABLE USERQUERYLOGDTO (USERQUERYLOGPK INTEGER NOT NULL, DATE TIMESTAMP NOT NULL, IP VARCHAR(255) NOT NULL, QUERYTEXT VARCHAR(16384) NOT NULL, USERNAME VARCHAR(255), PRIMARY KEY (USERQUERYLOGPK))
CREATE TABLE USERINTERFACETYPEDTO (USERINTERFACETYPEPK INTEGER NOT NULL, NAME VARCHAR(255) NOT NULL UNIQUE, PRIMARY KEY (USERINTERFACETYPEPK))
CREATE TABLE USERINTERFACEDTO (USERINTERFACEPK INTEGER NOT NULL, DESCRIPTION VARCHAR(16384), FILE BYTEA, ID VARCHAR(255) NOT NULL, NAME VARCHAR(255) NOT NULL, REFERENCE VARCHAR(255) NOT NULL, TYPE VARCHAR(255), softwarelicensePk INTEGER, userinterfacetypepk INTEGER, PRIMARY KEY (USERINTERFACEPK))
CREATE TABLE USERDTO (USERPK INTEGER NOT NULL, EMAIL VARCHAR(255) NOT NULL UNIQUE, FIRSTLOGINCODE VARCHAR(255) NOT NULL, IP VARCHAR(255), ISCERTIFIER BOOLEAN NOT NULL, ISCHANGINGPASSWORD BOOLEAN NOT NULL, ISFIRSTLOGIN BOOLEAN NOT NULL, ISMANAGER BOOLEAN NOT NULL, NAME VARCHAR(255) NOT NULL, PASSWORD VARCHAR(255) NOT NULL, USERNAME VARCHAR(255) NOT NULL UNIQUE, PRIMARY KEY (USERPK))
CREATE TABLE USERCOMMENTDTO (USERCOMMENTPK INTEGER NOT NULL, COMMENT VARCHAR(255) NOT NULL, DATE TIMESTAMP NOT NULL, userpk INTEGER NOT NULL, usagepk INTEGER, PRIMARY KEY (USERCOMMENTPK))
CREATE TABLE USECASEDTO (USECASEPK INTEGER NOT NULL, DESCRIPTION VARCHAR(16384), FILE BYTEA, ID VARCHAR(255) NOT NULL, NAME VARCHAR(255) NOT NULL, REFERENCE VARCHAR(255) NOT NULL, TYPE VARCHAR(255), softwarelicensePk INTEGER, PRIMARY KEY (USECASEPK))
CREATE TABLE USAGE (USAGEPK INTEGER NOT NULL, AUTHORSHIPDATE TIMESTAMP NOT NULL, CERTIFICATIONDATE TIMESTAMP, CREATORUSERNAME VARCHAR(255) NOT NULL, DESCRIPTION VARCHAR(16384) NOT NULL, authoruserpk INTEGER NOT NULL, certifieruserpk INTEGER, PRIMARY KEY (USAGEPK))
CREATE TABLE TESTTYPEDTO (TESTTYPEPK INTEGER NOT NULL, NAME VARCHAR(255) NOT NULL UNIQUE, PRIMARY KEY (TESTTYPEPK))
CREATE TABLE TESTMETHODTYPEDTO (TESTMETHODTYPEPK INTEGER NOT NULL, NAME VARCHAR(255) NOT NULL UNIQUE, PRIMARY KEY (TESTMETHODTYPEPK))
CREATE TABLE TEST (TESTPK INTEGER NOT NULL, OTHERPROGRAMMINGLANGUAGE VARCHAR(255), PRIMARY KEY (TESTPK))
CREATE TABLE TAGDTO (TAGPK INTEGER NOT NULL, NAME VARCHAR(255) NOT NULL, classificationPk INTEGER, PRIMARY KEY (TAGPK))
CREATE TABLE SYSTEMPROPERTYDTO (SYSTEMPROPERTYPK INTEGER NOT NULL, KEY VARCHAR(255) NOT NULL UNIQUE, VALUE VARCHAR(255) NOT NULL, PRIMARY KEY (SYSTEMPROPERTYPK))
CREATE TABLE SOURCECODETYPEDTO (SOURCECODETYPEPK INTEGER NOT NULL, NAME VARCHAR(255) NOT NULL UNIQUE, PRIMARY KEY (SOURCECODETYPEPK))
CREATE TABLE SOURCECODEDTO (SOURCECODEPK INTEGER NOT NULL, DESCRIPTION VARCHAR(16384), FILE BYTEA, ID VARCHAR(255) NOT NULL, NAME VARCHAR(255) NOT NULL, REFERENCE VARCHAR(255) NOT NULL, TYPE VARCHAR(255), softwarelicensePk INTEGER, sourcecodetypepk INTEGER, PRIMARY KEY (SOURCECODEPK))
CREATE TABLE SOLUTION (SOLUTIONPK INTEGER NOT NULL, ANALYSIS_ANALYSISPK INTEGER, DESIGN_DESIGNPK INTEGER, IMPLEMENTATION_IMPLEMENTATIONPK INTEGER, REQUIREMENTS_REQUIREMENTSPK INTEGER, TEST_TESTPK INTEGER, PRIMARY KEY (SOLUTIONPK))
CREATE TABLE SOFTWAREPRODUCTQUALITYDTO (SOFTWAREPRODUCTQUALITYPK INTEGER NOT NULL, COMPATIBILITYSCORE INTEGER, FUNCTIONALSUITABILITYSCORE INTEGER, MAINTAINABILITYSCORE INTEGER, PERFORMANCEEFFICIENCYSCORE INTEGER, PORTABILITYSCORE INTEGER, RELIABILITYSCORE INTEGER, SECURITYSCORE INTEGER, USABILITYSCORE INTEGER, PRIMARY KEY (SOFTWAREPRODUCTQUALITYPK))
CREATE TABLE SOFTWARELICENSEDTO (SOFTWARELICENSEPK INTEGER NOT NULL, ISGPLCOMPATIBLE BOOLEAN NOT NULL, NAME VARCHAR(255) NOT NULL UNIQUE, PRIMARY KEY (SOFTWARELICENSEPK))
CREATE TABLE REQUIREMENTS (REQUIREMENTSPK INTEGER NOT NULL, PRIMARY KEY (REQUIREMENTSPK))
CREATE TABLE RELATEDASSETTYPEDTO (RELATEDASSETTYPEPK INTEGER NOT NULL, NAME VARCHAR(255) NOT NULL UNIQUE, PRIMARY KEY (RELATEDASSETTYPEPK))
CREATE TABLE RELATEDASSET (RELATEDASSETPK INTEGER NOT NULL, ID VARCHAR(255) NOT NULL, NAME VARCHAR(255) NOT NULL, REFERENCE VARCHAR(255) NOT NULL, VERSION VARCHAR(255) NOT NULL, relatedassettypePk INTEGER, assetpk INTEGER, PRIMARY KEY (RELATEDASSETPK))
CREATE TABLE QUALITYINUSEDTO (QUALITYINUSEPK INTEGER NOT NULL, CONTEXTCOVERAGESCORE INTEGER, EFFECTIVENESSSCORE INTEGER, EFFICIENCYSCORE INTEGER, SAFETYSCORE INTEGER, SATISFACTIONSCORE INTEGER, PRIMARY KEY (QUALITYINUSEPK))
CREATE TABLE PROJECTDTO (PROJECTPK INTEGER NOT NULL, NAME VARCHAR(255) NOT NULL, organizationpk INTEGER, PRIMARY KEY (PROJECTPK))
CREATE TABLE PROGRAMMINGLANGUAGEDTO (PROGRAMMINGLANGUAGEPK INTEGER NOT NULL, NAME VARCHAR(255) NOT NULL UNIQUE, PRIMARY KEY (PROGRAMMINGLANGUAGEPK))
CREATE TABLE PARAMETERDTO (PARAMETERPK INTEGER NOT NULL, DIRECTION VARCHAR(255), NAME VARCHAR(255) NOT NULL, TYPE VARCHAR(255), operationPk INTEGER, PRIMARY KEY (PARAMETERPK))
CREATE TABLE ORGANIZATIONDTO (ORGANIZATIONPK INTEGER NOT NULL, NAME VARCHAR(255) NOT NULL, PRIMARY KEY (ORGANIZATIONPK))
CREATE TABLE OPERATIONALSYSTEMTYPEDTO (OPERATIONALSYSTEMTYPEPK INTEGER NOT NULL, NAME VARCHAR(255) NOT NULL UNIQUE, PRIMARY KEY (OPERATIONALSYSTEMTYPEPK))
CREATE TABLE OPERATIONDTO (OPERATIONPK INTEGER NOT NULL, DESCRIPTION VARCHAR(255), INITIATESTRANSACTION BOOLEAN, NAME VARCHAR(255) NOT NULL, interfacespecPk INTEGER, PRIMARY KEY (OPERATIONPK))
CREATE TABLE NONFUNCTIONALREQUIREMENTTYPEDTO (NONFUNCTIONALREQUIREMENTTYPEPK INTEGER NOT NULL, NAME VARCHAR(255) NOT NULL UNIQUE, PRIMARY KEY (NONFUNCTIONALREQUIREMENTTYPEPK))
CREATE TABLE NONFUNCTIONALREQUIREMENTDTO (NONFUNCTIONALREQUIREMENTPK INTEGER NOT NULL, DESCRIPTION VARCHAR(16384), FILE BYTEA, ID VARCHAR(255) NOT NULL, NAME VARCHAR(255) NOT NULL, REFERENCE VARCHAR(255) NOT NULL, TYPE VARCHAR(255), nonfunctionalrequirementtypepk INTEGER, softwarelicensePk INTEGER, PRIMARY KEY (NONFUNCTIONALREQUIREMENTPK))
CREATE TABLE LOGUSERLOGINDTO (LOGUSERLOGINPK INTEGER NOT NULL, DATE TIMESTAMP NOT NULL, EMAIL VARCHAR(255) NOT NULL, FULLNAME VARCHAR(255) NOT NULL, IP VARCHAR(255) NOT NULL, USERNAME VARCHAR(255) NOT NULL, PRIMARY KEY (LOGUSERLOGINPK))
CREATE TABLE INTERNATIONALIZATIONTYPEDTO (INTERNATIONALIZATIONTYPEPK INTEGER NOT NULL, NAME VARCHAR(255) NOT NULL UNIQUE, PRIMARY KEY (INTERNATIONALIZATIONTYPEPK))
CREATE TABLE INTERFACESPECDTO (INTERFACESPECPK INTEGER NOT NULL, DESCRIPTION VARCHAR(255), NAME VARCHAR(255) NOT NULL, designpk INTEGER, analysispk INTEGER, PRIMARY KEY (INTERFACESPECPK))
CREATE TABLE IMPLEMENTATION (IMPLEMENTATIONPK INTEGER NOT NULL, OTHERPROGRAMMINGLANGUAGE VARCHAR(255), PRIMARY KEY (IMPLEMENTATIONPK))
CREATE TABLE FUNCTIONALREQUIREMENTTYPEDTO (FUNCTIONALREQUIREMENTTYPEPK INTEGER NOT NULL, NAME VARCHAR(255) NOT NULL UNIQUE, PRIMARY KEY (FUNCTIONALREQUIREMENTTYPEPK))
CREATE TABLE FUNCTIONALREQUIREMENTDTO (FUNCTIONALREQUIREMENTPK INTEGER NOT NULL, DESCRIPTION VARCHAR(16384), FILE BYTEA, ID VARCHAR(255) NOT NULL, NAME VARCHAR(255) NOT NULL, REFERENCE VARCHAR(255) NOT NULL, TYPE VARCHAR(255), functionalrequirementtypePk INTEGER, softwarelicensePk INTEGER, PRIMARY KEY (FUNCTIONALREQUIREMENTPK))
CREATE TABLE FREEFORMDESCRIPTORDTO (FREEFORMDESCRIPTORPK INTEGER NOT NULL, FREEFORMVALUE VARCHAR(255) NOT NULL, NAME VARCHAR(255) NOT NULL, descriptorgroupPk INTEGER, PRIMARY KEY (FREEFORMDESCRIPTORPK))
CREATE TABLE FEEDBACKMESSAGEDTO (FEEDBACKMESSAGEPK INTEGER NOT NULL, CURRENTIP VARCHAR(255) NOT NULL, DATE TIMESTAMP NOT NULL, EMAIL VARCHAR(255) NOT NULL, MESSAGE VARCHAR(16384) NOT NULL, USERNAME VARCHAR(255) NOT NULL, PRIMARY KEY (FEEDBACKMESSAGEPK))
CREATE TABLE FEEDBACKDTO (FEEDBACKPK INTEGER NOT NULL, COMMENT VARCHAR(255), DATE TIMESTAMP, GENERALSCORE INTEGER, HASFEEDBACK BOOLEAN NOT NULL, ISFORCERTIFICATION BOOLEAN NOT NULL, assetpk INTEGER, userpk INTEGER NOT NULL, qualityinusePk INTEGER NOT NULL, softwareproductqualityPk INTEGER NOT NULL, PRIMARY KEY (FEEDBACKPK))
CREATE TABLE EFFORTDTO (EFFORTPK INTEGER NOT NULL, ESTIMATEDTIME FLOAT, LINESOFCODE INTEGER, MONETARY FLOAT, REALTIME FLOAT, TEAMMEMBERS INTEGER, PRIMARY KEY (EFFORTPK))
CREATE TABLE DESIGNPATTERNDTO (DESIGNPATTERNPK INTEGER NOT NULL, NAME VARCHAR(255) NOT NULL UNIQUE, PRIMARY KEY (DESIGNPATTERNPK))
CREATE TABLE DESIGN (DESIGNPK INTEGER NOT NULL, PRIMARY KEY (DESIGNPK))
CREATE TABLE DESCRIPTORGROUPDTO (DESCRIPTORGROUPPK INTEGER NOT NULL, NAME VARCHAR(255) NOT NULL, classificationPk INTEGER, PRIMARY KEY (DESCRIPTORGROUPPK))
CREATE TABLE CONSUMPTIONDTO (CONSUMPTIONPK INTEGER NOT NULL, DATE TIMESTAMP NOT NULL, userpk INTEGER NOT NULL, usagepk INTEGER, PRIMARY KEY (CONSUMPTIONPK))
CREATE TABLE CONDITIONDTO (CONDITIONPK INTEGER NOT NULL, DESCRIPTION VARCHAR(255) NOT NULL, TYPE VARCHAR(255) NOT NULL, operationPk INTEGER, PRIMARY KEY (CONDITIONPK))
CREATE TABLE CLASSIFICATION (CLASSIFICATIONPK INTEGER NOT NULL, AVERAGESCORE FLOAT, OTHERAPPLICATIONDOMAIN VARCHAR(255), OTHERAPPLICATIONSUBDOMAIN VARCHAR(255), REUSECOUNTER INTEGER NOT NULL, PRIMARY KEY (CLASSIFICATIONPK))
CREATE TABLE ASSETTYPE (ASSETTYPEPK INTEGER NOT NULL, NAME VARCHAR(255) NOT NULL UNIQUE, PRIMARY KEY (ASSETTYPEPK))
CREATE TABLE ASSETSTATETYPE (ASSETSTATETYPEPK INTEGER NOT NULL, NAME VARCHAR(255) NOT NULL UNIQUE, PRIMARY KEY (ASSETSTATETYPEPK))
CREATE TABLE ASSETIDSEQUENCEDTO (ASSETIDSEQUENCEPK INTEGER NOT NULL, PRIMARY KEY (ASSETIDSEQUENCEPK))
CREATE TABLE ASSET (ASSETPK INTEGER NOT NULL, ACCESSRIGHTS VARCHAR(255) NOT NULL, CREATIONDATE TIMESTAMP NOT NULL, DATE TIMESTAMP NOT NULL, DESCRIPTION VARCHAR(16384) NOT NULL, ID VARCHAR(255) NOT NULL, ISEXCLUDED BOOLEAN NOT NULL, NAME VARCHAR(255) NOT NULL, OTHERSOFTWARELICENSE VARCHAR(255), OTHERTYPE VARCHAR(255), SHORTDESCRIPTION VARCHAR(1024) NOT NULL, VERSION VARCHAR(255) NOT NULL, softwarelicensePk INTEGER, assetstatetypepk INTEGER NOT NULL, assettypepk INTEGER NOT NULL, CLASSIFICATION_CLASSIFICATIONPK INTEGER, EFFORTDTO_EFFORTPK INTEGER, SOLUTION_SOLUTIONPK INTEGER, USAGE_USAGEPK INTEGER, PRIMARY KEY (ASSETPK))
CREATE INDEX INDEX_ASSET_ID ON ASSET (ID)
CREATE TABLE ARTIFACTDEPENDENCYTYPEDTO (ARTIFACTDEPENDENCYTYPEPK INTEGER NOT NULL, NAME VARCHAR(255) NOT NULL UNIQUE, PRIMARY KEY (ARTIFACTDEPENDENCYTYPEPK))
CREATE TABLE ARTIFACTDEPENDENCYDTO (ARTIFACTDEPENDENCYPK INTEGER NOT NULL, ARTIFACTID VARCHAR(255) NOT NULL, artifactdependencytypepk INTEGER NOT NULL, PRIMARY KEY (ARTIFACTDEPENDENCYPK))
CREATE TABLE ARTIFACTDTO (ARTIFACTPK INTEGER NOT NULL, DESCRIPTION VARCHAR(16384), FILE BYTEA, ID VARCHAR(255) NOT NULL, NAME VARCHAR(255) NOT NULL, REFERENCE VARCHAR(255) NOT NULL, TYPE VARCHAR(255), softwarelicensePk INTEGER, PRIMARY KEY (ARTIFACTPK))
CREATE TABLE APPLICATIONSUBDOMAIN (APPLICATIONSUBDOMAINPK INTEGER NOT NULL, NAME VARCHAR(255) NOT NULL, applicationdomainpk INTEGER, PRIMARY KEY (APPLICATIONSUBDOMAINPK))
CREATE TABLE APPLICATIONDOMAIN (APPLICATIONDOMAINPK INTEGER NOT NULL, NAME VARCHAR(255) NOT NULL UNIQUE, PRIMARY KEY (APPLICATIONDOMAINPK))
CREATE TABLE ANALYSIS (ANALYSISPK INTEGER NOT NULL, PRIMARY KEY (ANALYSISPK))
CREATE TABLE ADJUSTMENTDTO (ADJUSTMENTPK INTEGER NOT NULL, DATE TIMESTAMP NOT NULL, DESCRIPTION VARCHAR(255) NOT NULL, userpk INTEGER NOT NULL, usagepk INTEGER, PRIMARY KEY (ADJUSTMENTPK))
CREATE TABLE WSDLDTO (WSDLPK INTEGER NOT NULL, DESCRIPTION VARCHAR(16384), FILE BYTEA, ID VARCHAR(255) NOT NULL, NAME VARCHAR(255) NOT NULL, REFERENCE VARCHAR(255) NOT NULL, TYPE VARCHAR(255), softwarelicensePk INTEGER, PRIMARY KEY (WSDLPK))
CREATE TABLE USERINTERFACEDTO_ARTIFACTDEPENDENCYDTO (UserInterfaceDTO_USERINTERFACEPK INTEGER NOT NULL, artifactDependencyDTOs_ARTIFACTDEPENDENCYPK INTEGER NOT NULL, PRIMARY KEY (UserInterfaceDTO_USERINTERFACEPK, artifactDependencyDTOs_ARTIFACTDEPENDENCYPK))
CREATE TABLE USERDTO_PROJECTDTO (UserDTO_USERPK INTEGER NOT NULL, projectDTOs_PROJECTPK INTEGER NOT NULL, PRIMARY KEY (UserDTO_USERPK, projectDTOs_PROJECTPK))
CREATE TABLE USECASEDTO_ARTIFACTDEPENDENCYDTO (UseCaseDTO_USECASEPK INTEGER NOT NULL, artifactDependencyDTOs_ARTIFACTDEPENDENCYPK INTEGER NOT NULL, PRIMARY KEY (UseCaseDTO_USECASEPK, artifactDependencyDTOs_ARTIFACTDEPENDENCYPK))
CREATE TABLE USAGE_ARTIFACTDTO (Usage_USAGEPK INTEGER NOT NULL, artifactDTOs_ARTIFACTPK INTEGER NOT NULL, PRIMARY KEY (Usage_USAGEPK, artifactDTOs_ARTIFACTPK))
CREATE TABLE TEST_ARTIFACTDTO (Test_TESTPK INTEGER NOT NULL, artifactDTOs_ARTIFACTPK INTEGER NOT NULL, PRIMARY KEY (Test_TESTPK, artifactDTOs_ARTIFACTPK))
CREATE TABLE TEST_DESIGNPATTERNDTO (Test_TESTPK INTEGER NOT NULL, designPatternDTOs_DESIGNPATTERNPK INTEGER NOT NULL, PRIMARY KEY (Test_TESTPK, designPatternDTOs_DESIGNPATTERNPK))
CREATE TABLE TEST_PROGRAMMINGLANGUAGEDTO (Test_TESTPK INTEGER NOT NULL, programmingLanguageDTOs_PROGRAMMINGLANGUAGEPK INTEGER NOT NULL, PRIMARY KEY (Test_TESTPK, programmingLanguageDTOs_PROGRAMMINGLANGUAGEPK))
CREATE TABLE TEST_SOURCECODEDTO (Test_TESTPK INTEGER NOT NULL, sourceCodeDTOs_SOURCECODEPK INTEGER NOT NULL, PRIMARY KEY (Test_TESTPK, sourceCodeDTOs_SOURCECODEPK))
CREATE TABLE TEST_TESTMETHODTYPEDTO (Test_TESTPK INTEGER NOT NULL, testMethodTypeDTOs_TESTMETHODTYPEPK INTEGER NOT NULL, PRIMARY KEY (Test_TESTPK, testMethodTypeDTOs_TESTMETHODTYPEPK))
CREATE TABLE TEST_TESTTYPEDTO (Test_TESTPK INTEGER NOT NULL, testTypeDTOs_TESTTYPEPK INTEGER NOT NULL, PRIMARY KEY (Test_TESTPK, testTypeDTOs_TESTTYPEPK))
CREATE TABLE SOURCECODEDTO_ARTIFACTDEPENDENCYDTO (SourceCodeDTO_SOURCECODEPK INTEGER NOT NULL, artifactDependencyDTOs_ARTIFACTDEPENDENCYPK INTEGER NOT NULL, PRIMARY KEY (SourceCodeDTO_SOURCECODEPK, artifactDependencyDTOs_ARTIFACTDEPENDENCYPK))
CREATE TABLE REQUIREMENTS_FUNCTIONALREQUIREMENTDTO (Requirements_REQUIREMENTSPK INTEGER NOT NULL, functionalRequirementDTOs_FUNCTIONALREQUIREMENTPK INTEGER NOT NULL, PRIMARY KEY (Requirements_REQUIREMENTSPK, functionalRequirementDTOs_FUNCTIONALREQUIREMENTPK))
CREATE TABLE REQUIREMENTS_INTERNATIONALIZATIONTYPEDTO (Requirements_REQUIREMENTSPK INTEGER NOT NULL, internationalizationTypeDTOs_INTERNATIONALIZATIONTYPEPK INTEGER NOT NULL, PRIMARY KEY (Requirements_REQUIREMENTSPK, internationalizationTypeDTOs_INTERNATIONALIZATIONTYPEPK))
CREATE TABLE REQUIREMENTS_NONFUNCTIONALREQUIREMENTDTO (Requirements_REQUIREMENTSPK INTEGER NOT NULL, nonFunctionalRequirementDTOs_NONFUNCTIONALREQUIREMENTPK INTEGER NOT NULL, PRIMARY KEY (Requirements_REQUIREMENTSPK, nonFunctionalRequirementDTOs_NONFUNCTIONALREQUIREMENTPK))
CREATE TABLE REQUIREMENTS_OPERATIONALSYSTEMTYPEDTO (Requirements_REQUIREMENTSPK INTEGER NOT NULL, operationalSystemTypeDTOs_OPERATIONALSYSTEMTYPEPK INTEGER NOT NULL, PRIMARY KEY (Requirements_REQUIREMENTSPK, operationalSystemTypeDTOs_OPERATIONALSYSTEMTYPEPK))
CREATE TABLE REQUIREMENTS_USECASEDTO (Requirements_REQUIREMENTSPK INTEGER NOT NULL, useCaseDTOs_USECASEPK INTEGER NOT NULL, PRIMARY KEY (Requirements_REQUIREMENTSPK, useCaseDTOs_USECASEPK))
CREATE TABLE REQUIREMENTS_USERINTERFACEDTO (Requirements_REQUIREMENTSPK INTEGER NOT NULL, userInterfaceDTOs_USERINTERFACEPK INTEGER NOT NULL, PRIMARY KEY (Requirements_REQUIREMENTSPK, userInterfaceDTOs_USERINTERFACEPK))
CREATE TABLE NONFUNCTIONALREQUIREMENTDTO_ARTIFACTDEPENDENCYDTO (NonFunctionalRequirementDTO_NONFUNCTIONALREQUIREMENTPK INTEGER NOT NULL, artifactDependencyDTOs_ARTIFACTDEPENDENCYPK INTEGER NOT NULL, PRIMARY KEY (NonFunctionalRequirementDTO_NONFUNCTIONALREQUIREMENTPK, artifactDependencyDTOs_ARTIFACTDEPENDENCYPK))
CREATE TABLE IMPLEMENTATION_ARTIFACTDTO (Implementation_IMPLEMENTATIONPK INTEGER NOT NULL, artifactDTOs_ARTIFACTPK INTEGER NOT NULL, PRIMARY KEY (Implementation_IMPLEMENTATIONPK, artifactDTOs_ARTIFACTPK))
CREATE TABLE IMPLEMENTATION_DESIGNPATTERNDTO (Implementation_IMPLEMENTATIONPK INTEGER NOT NULL, designPatternDTOs_DESIGNPATTERNPK INTEGER NOT NULL, PRIMARY KEY (Implementation_IMPLEMENTATIONPK, designPatternDTOs_DESIGNPATTERNPK))
CREATE TABLE IMPLEMENTATION_PROGRAMMINGLANGUAGEDTO (Implementation_IMPLEMENTATIONPK INTEGER NOT NULL, programmingLanguageDTOs_PROGRAMMINGLANGUAGEPK INTEGER NOT NULL, PRIMARY KEY (Implementation_IMPLEMENTATIONPK, programmingLanguageDTOs_PROGRAMMINGLANGUAGEPK))
CREATE TABLE IMPLEMENTATION_SOURCECODEDTO (Implementation_IMPLEMENTATIONPK INTEGER NOT NULL, sourceCodeDTOs_SOURCECODEPK INTEGER NOT NULL, PRIMARY KEY (Implementation_IMPLEMENTATIONPK, sourceCodeDTOs_SOURCECODEPK))
CREATE TABLE IMPLEMENTATION_USERINTERFACEDTO (Implementation_IMPLEMENTATIONPK INTEGER NOT NULL, userInterfaceDTOs_USERINTERFACEPK INTEGER NOT NULL, PRIMARY KEY (Implementation_IMPLEMENTATIONPK, userInterfaceDTOs_USERINTERFACEPK))
CREATE TABLE IMPLEMENTATION_WSDLDTO (Implementation_IMPLEMENTATIONPK INTEGER NOT NULL, wsdlDTOs_WSDLPK INTEGER NOT NULL, PRIMARY KEY (Implementation_IMPLEMENTATIONPK, wsdlDTOs_WSDLPK))
CREATE TABLE FUNCTIONALREQUIREMENTDTO_ARTIFACTDEPENDENCYDTO (FunctionalRequirementDTO_FUNCTIONALREQUIREMENTPK INTEGER NOT NULL, artifactDependencyDTOs_ARTIFACTDEPENDENCYPK INTEGER NOT NULL, PRIMARY KEY (FunctionalRequirementDTO_FUNCTIONALREQUIREMENTPK, artifactDependencyDTOs_ARTIFACTDEPENDENCYPK))
CREATE TABLE DESIGN_ARTIFACTDTO (Design_DESIGNPK INTEGER NOT NULL, artifactDTOs_ARTIFACTPK INTEGER NOT NULL, PRIMARY KEY (Design_DESIGNPK, artifactDTOs_ARTIFACTPK))
CREATE TABLE DESIGN_DESIGNPATTERNDTO (Design_DESIGNPK INTEGER NOT NULL, designPatternDTOs_DESIGNPATTERNPK INTEGER NOT NULL, PRIMARY KEY (Design_DESIGNPK, designPatternDTOs_DESIGNPATTERNPK))
CREATE TABLE DESIGN_USERINTERFACEDTO (Design_DESIGNPK INTEGER NOT NULL, userInterfaceDTOs_USERINTERFACEPK INTEGER NOT NULL, PRIMARY KEY (Design_DESIGNPK, userInterfaceDTOs_USERINTERFACEPK))
CREATE TABLE CLASSIFICATION_APPLICATIONSUBDOMAIN (Classification_CLASSIFICATIONPK INTEGER NOT NULL, applicationSubdomains_APPLICATIONSUBDOMAINPK INTEGER NOT NULL, PRIMARY KEY (Classification_CLASSIFICATIONPK, applicationSubdomains_APPLICATIONSUBDOMAINPK))
CREATE TABLE CLASSIFICATION_PROJECTDTO (Classification_CLASSIFICATIONPK INTEGER NOT NULL, projectDTOs_PROJECTPK INTEGER NOT NULL, PRIMARY KEY (Classification_CLASSIFICATIONPK, projectDTOs_PROJECTPK))
CREATE TABLE ARTIFACTDTO_ARTIFACTDEPENDENCYDTO (ArtifactDTO_ARTIFACTPK INTEGER NOT NULL, artifactDependencyDTOs_ARTIFACTDEPENDENCYPK INTEGER NOT NULL, PRIMARY KEY (ArtifactDTO_ARTIFACTPK, artifactDependencyDTOs_ARTIFACTDEPENDENCYPK))
CREATE TABLE ANALYSIS_ARTIFACTDTO (Analysis_ANALYSISPK INTEGER NOT NULL, artifactDTOs_ARTIFACTPK INTEGER NOT NULL, PRIMARY KEY (Analysis_ANALYSISPK, artifactDTOs_ARTIFACTPK))
CREATE TABLE ANALYSIS_USECASEDTO (Analysis_ANALYSISPK INTEGER NOT NULL, useCaseDTOs_USECASEPK INTEGER NOT NULL, PRIMARY KEY (Analysis_ANALYSISPK, useCaseDTOs_USECASEPK))
CREATE TABLE ANALYSIS_USERINTERFACEDTO (Analysis_ANALYSISPK INTEGER NOT NULL, userInterfaceDTOs_USERINTERFACEPK INTEGER NOT NULL, PRIMARY KEY (Analysis_ANALYSISPK, userInterfaceDTOs_USERINTERFACEPK))
CREATE TABLE WSDLDTO_ARTIFACTDEPENDENCYDTO (WsdlDTO_WSDLPK INTEGER NOT NULL, artifactDependencyDTOs_ARTIFACTDEPENDENCYPK INTEGER NOT NULL, PRIMARY KEY (WsdlDTO_WSDLPK, artifactDependencyDTOs_ARTIFACTDEPENDENCYPK))
ALTER TABLE USERINTERFACEDTO ADD CONSTRAINT FK_USERINTERFACEDTO_softwarelicensePk FOREIGN KEY (softwarelicensePk) REFERENCES SOFTWARELICENSEDTO (SOFTWARELICENSEPK)
ALTER TABLE USERINTERFACEDTO ADD CONSTRAINT FK_USERINTERFACEDTO_userinterfacetypepk FOREIGN KEY (userinterfacetypepk) REFERENCES USERINTERFACETYPEDTO (USERINTERFACETYPEPK)
ALTER TABLE USERCOMMENTDTO ADD CONSTRAINT FK_USERCOMMENTDTO_userpk FOREIGN KEY (userpk) REFERENCES USERDTO (USERPK)
ALTER TABLE USERCOMMENTDTO ADD CONSTRAINT FK_USERCOMMENTDTO_usagepk FOREIGN KEY (usagepk) REFERENCES USAGE (USAGEPK)
ALTER TABLE USECASEDTO ADD CONSTRAINT FK_USECASEDTO_softwarelicensePk FOREIGN KEY (softwarelicensePk) REFERENCES SOFTWARELICENSEDTO (SOFTWARELICENSEPK)
ALTER TABLE USAGE ADD CONSTRAINT FK_USAGE_certifieruserpk FOREIGN KEY (certifieruserpk) REFERENCES USERDTO (USERPK)
ALTER TABLE USAGE ADD CONSTRAINT FK_USAGE_authoruserpk FOREIGN KEY (authoruserpk) REFERENCES USERDTO (USERPK)
ALTER TABLE TAGDTO ADD CONSTRAINT FK_TAGDTO_classificationPk FOREIGN KEY (classificationPk) REFERENCES CLASSIFICATION (CLASSIFICATIONPK)
ALTER TABLE SOURCECODEDTO ADD CONSTRAINT FK_SOURCECODEDTO_sourcecodetypepk FOREIGN KEY (sourcecodetypepk) REFERENCES SOURCECODETYPEDTO (SOURCECODETYPEPK)
ALTER TABLE SOURCECODEDTO ADD CONSTRAINT FK_SOURCECODEDTO_softwarelicensePk FOREIGN KEY (softwarelicensePk) REFERENCES SOFTWARELICENSEDTO (SOFTWARELICENSEPK)
ALTER TABLE SOLUTION ADD CONSTRAINT FK_SOLUTION_IMPLEMENTATION_IMPLEMENTATIONPK FOREIGN KEY (IMPLEMENTATION_IMPLEMENTATIONPK) REFERENCES IMPLEMENTATION (IMPLEMENTATIONPK)
ALTER TABLE SOLUTION ADD CONSTRAINT FK_SOLUTION_TEST_TESTPK FOREIGN KEY (TEST_TESTPK) REFERENCES TEST (TESTPK)
ALTER TABLE SOLUTION ADD CONSTRAINT FK_SOLUTION_DESIGN_DESIGNPK FOREIGN KEY (DESIGN_DESIGNPK) REFERENCES DESIGN (DESIGNPK)
ALTER TABLE SOLUTION ADD CONSTRAINT FK_SOLUTION_ANALYSIS_ANALYSISPK FOREIGN KEY (ANALYSIS_ANALYSISPK) REFERENCES ANALYSIS (ANALYSISPK)
ALTER TABLE SOLUTION ADD CONSTRAINT FK_SOLUTION_REQUIREMENTS_REQUIREMENTSPK FOREIGN KEY (REQUIREMENTS_REQUIREMENTSPK) REFERENCES REQUIREMENTS (REQUIREMENTSPK)
ALTER TABLE RELATEDASSET ADD CONSTRAINT FK_RELATEDASSET_relatedassettypePk FOREIGN KEY (relatedassettypePk) REFERENCES RELATEDASSETTYPEDTO (RELATEDASSETTYPEPK)
ALTER TABLE RELATEDASSET ADD CONSTRAINT FK_RELATEDASSET_assetpk FOREIGN KEY (assetpk) REFERENCES ASSET (ASSETPK)
ALTER TABLE PROJECTDTO ADD CONSTRAINT FK_PROJECTDTO_organizationpk FOREIGN KEY (organizationpk) REFERENCES ORGANIZATIONDTO (ORGANIZATIONPK)
ALTER TABLE PARAMETERDTO ADD CONSTRAINT FK_PARAMETERDTO_operationPk FOREIGN KEY (operationPk) REFERENCES OPERATIONDTO (OPERATIONPK)
ALTER TABLE OPERATIONDTO ADD CONSTRAINT FK_OPERATIONDTO_interfacespecPk FOREIGN KEY (interfacespecPk) REFERENCES INTERFACESPECDTO (INTERFACESPECPK)
ALTER TABLE NONFUNCTIONALREQUIREMENTDTO ADD CONSTRAINT FK_NONFUNCTIONALREQUIREMENTDTO_nonfunctionalrequirementtypepk FOREIGN KEY (nonfunctionalrequirementtypepk) REFERENCES NONFUNCTIONALREQUIREMENTTYPEDTO (NONFUNCTIONALREQUIREMENTTYPEPK)
ALTER TABLE NONFUNCTIONALREQUIREMENTDTO ADD CONSTRAINT FK_NONFUNCTIONALREQUIREMENTDTO_softwarelicensePk FOREIGN KEY (softwarelicensePk) REFERENCES SOFTWARELICENSEDTO (SOFTWARELICENSEPK)
ALTER TABLE INTERFACESPECDTO ADD CONSTRAINT FK_INTERFACESPECDTO_designpk FOREIGN KEY (designpk) REFERENCES DESIGN (DESIGNPK)
ALTER TABLE INTERFACESPECDTO ADD CONSTRAINT FK_INTERFACESPECDTO_analysispk FOREIGN KEY (analysispk) REFERENCES ANALYSIS (ANALYSISPK)
ALTER TABLE FUNCTIONALREQUIREMENTDTO ADD CONSTRAINT FK_FUNCTIONALREQUIREMENTDTO_softwarelicensePk FOREIGN KEY (softwarelicensePk) REFERENCES SOFTWARELICENSEDTO (SOFTWARELICENSEPK)
ALTER TABLE FUNCTIONALREQUIREMENTDTO ADD CONSTRAINT FK_FUNCTIONALREQUIREMENTDTO_functionalrequirementtypePk FOREIGN KEY (functionalrequirementtypePk) REFERENCES FUNCTIONALREQUIREMENTTYPEDTO (FUNCTIONALREQUIREMENTTYPEPK)
ALTER TABLE FREEFORMDESCRIPTORDTO ADD CONSTRAINT FK_FREEFORMDESCRIPTORDTO_descriptorgroupPk FOREIGN KEY (descriptorgroupPk) REFERENCES DESCRIPTORGROUPDTO (DESCRIPTORGROUPPK)
ALTER TABLE FEEDBACKDTO ADD CONSTRAINT FK_FEEDBACKDTO_assetpk FOREIGN KEY (assetpk) REFERENCES ASSET (ASSETPK)
ALTER TABLE FEEDBACKDTO ADD CONSTRAINT FK_FEEDBACKDTO_userpk FOREIGN KEY (userpk) REFERENCES USERDTO (USERPK)
ALTER TABLE FEEDBACKDTO ADD CONSTRAINT FK_FEEDBACKDTO_softwareproductqualityPk FOREIGN KEY (softwareproductqualityPk) REFERENCES SOFTWAREPRODUCTQUALITYDTO (SOFTWAREPRODUCTQUALITYPK)
ALTER TABLE FEEDBACKDTO ADD CONSTRAINT FK_FEEDBACKDTO_qualityinusePk FOREIGN KEY (qualityinusePk) REFERENCES QUALITYINUSEDTO (QUALITYINUSEPK)
ALTER TABLE DESCRIPTORGROUPDTO ADD CONSTRAINT FK_DESCRIPTORGROUPDTO_classificationPk FOREIGN KEY (classificationPk) REFERENCES CLASSIFICATION (CLASSIFICATIONPK)
ALTER TABLE CONSUMPTIONDTO ADD CONSTRAINT FK_CONSUMPTIONDTO_userpk FOREIGN KEY (userpk) REFERENCES USERDTO (USERPK)
ALTER TABLE CONSUMPTIONDTO ADD CONSTRAINT FK_CONSUMPTIONDTO_usagepk FOREIGN KEY (usagepk) REFERENCES USAGE (USAGEPK)
ALTER TABLE CONDITIONDTO ADD CONSTRAINT FK_CONDITIONDTO_operationPk FOREIGN KEY (operationPk) REFERENCES OPERATIONDTO (OPERATIONPK)
ALTER TABLE ASSET ADD CONSTRAINT FK_ASSET_softwarelicensePk FOREIGN KEY (softwarelicensePk) REFERENCES SOFTWARELICENSEDTO (SOFTWARELICENSEPK)
ALTER TABLE ASSET ADD CONSTRAINT FK_ASSET_USAGE_USAGEPK FOREIGN KEY (USAGE_USAGEPK) REFERENCES USAGE (USAGEPK)
ALTER TABLE ASSET ADD CONSTRAINT FK_ASSET_assetstatetypepk FOREIGN KEY (assetstatetypepk) REFERENCES ASSETSTATETYPE (ASSETSTATETYPEPK)
ALTER TABLE ASSET ADD CONSTRAINT FK_ASSET_EFFORTDTO_EFFORTPK FOREIGN KEY (EFFORTDTO_EFFORTPK) REFERENCES EFFORTDTO (EFFORTPK)
ALTER TABLE ASSET ADD CONSTRAINT FK_ASSET_SOLUTION_SOLUTIONPK FOREIGN KEY (SOLUTION_SOLUTIONPK) REFERENCES SOLUTION (SOLUTIONPK)
ALTER TABLE ASSET ADD CONSTRAINT FK_ASSET_CLASSIFICATION_CLASSIFICATIONPK FOREIGN KEY (CLASSIFICATION_CLASSIFICATIONPK) REFERENCES CLASSIFICATION (CLASSIFICATIONPK)
ALTER TABLE ASSET ADD CONSTRAINT FK_ASSET_assettypepk FOREIGN KEY (assettypepk) REFERENCES ASSETTYPE (ASSETTYPEPK)
ALTER TABLE ARTIFACTDEPENDENCYDTO ADD CONSTRAINT FK_ARTIFACTDEPENDENCYDTO_artifactdependencytypepk FOREIGN KEY (artifactdependencytypepk) REFERENCES ARTIFACTDEPENDENCYTYPEDTO (ARTIFACTDEPENDENCYTYPEPK)
ALTER TABLE ARTIFACTDTO ADD CONSTRAINT FK_ARTIFACTDTO_softwarelicensePk FOREIGN KEY (softwarelicensePk) REFERENCES SOFTWARELICENSEDTO (SOFTWARELICENSEPK)
ALTER TABLE APPLICATIONSUBDOMAIN ADD CONSTRAINT FK_APPLICATIONSUBDOMAIN_applicationdomainpk FOREIGN KEY (applicationdomainpk) REFERENCES APPLICATIONDOMAIN (APPLICATIONDOMAINPK)
ALTER TABLE ADJUSTMENTDTO ADD CONSTRAINT FK_ADJUSTMENTDTO_userpk FOREIGN KEY (userpk) REFERENCES USERDTO (USERPK)
ALTER TABLE ADJUSTMENTDTO ADD CONSTRAINT FK_ADJUSTMENTDTO_usagepk FOREIGN KEY (usagepk) REFERENCES USAGE (USAGEPK)
ALTER TABLE WSDLDTO ADD CONSTRAINT FK_WSDLDTO_softwarelicensePk FOREIGN KEY (softwarelicensePk) REFERENCES SOFTWARELICENSEDTO (SOFTWARELICENSEPK)
ALTER TABLE USERINTERFACEDTO_ARTIFACTDEPENDENCYDTO ADD CONSTRAINT SRNTRFCDTRTFACTDEPENDENCYDTOrtfctDpndncyDTsARTIFACTDEPENDENCYPK FOREIGN KEY (artifactDependencyDTOs_ARTIFACTDEPENDENCYPK) REFERENCES ARTIFACTDEPENDENCYDTO (ARTIFACTDEPENDENCYPK)
ALTER TABLE USERINTERFACEDTO_ARTIFACTDEPENDENCYDTO ADD CONSTRAINT SRNTERFACEDTOARTIFACTDEPENDENCYDTOsrInterfaceDTOUSERINTERFACEPK FOREIGN KEY (UserInterfaceDTO_USERINTERFACEPK) REFERENCES USERINTERFACEDTO (USERINTERFACEPK)
ALTER TABLE USERDTO_PROJECTDTO ADD CONSTRAINT FK_USERDTO_PROJECTDTO_projectDTOs_PROJECTPK FOREIGN KEY (projectDTOs_PROJECTPK) REFERENCES PROJECTDTO (PROJECTPK)
ALTER TABLE USERDTO_PROJECTDTO ADD CONSTRAINT FK_USERDTO_PROJECTDTO_UserDTO_USERPK FOREIGN KEY (UserDTO_USERPK) REFERENCES USERDTO (USERPK)
ALTER TABLE USECASEDTO_ARTIFACTDEPENDENCYDTO ADD CONSTRAINT FK_USECASEDTO_ARTIFACTDEPENDENCYDTO_UseCaseDTO_USECASEPK FOREIGN KEY (UseCaseDTO_USECASEPK) REFERENCES USECASEDTO (USECASEPK)
ALTER TABLE USECASEDTO_ARTIFACTDEPENDENCYDTO ADD CONSTRAINT SCSDTRTIFACTDEPENDENCYDTOrtfctDpendencyDTOsARTIFACTDEPENDENCYPK FOREIGN KEY (artifactDependencyDTOs_ARTIFACTDEPENDENCYPK) REFERENCES ARTIFACTDEPENDENCYDTO (ARTIFACTDEPENDENCYPK)
ALTER TABLE USAGE_ARTIFACTDTO ADD CONSTRAINT FK_USAGE_ARTIFACTDTO_Usage_USAGEPK FOREIGN KEY (Usage_USAGEPK) REFERENCES USAGE (USAGEPK)
ALTER TABLE USAGE_ARTIFACTDTO ADD CONSTRAINT FK_USAGE_ARTIFACTDTO_artifactDTOs_ARTIFACTPK FOREIGN KEY (artifactDTOs_ARTIFACTPK) REFERENCES ARTIFACTDTO (ARTIFACTPK)
ALTER TABLE TEST_ARTIFACTDTO ADD CONSTRAINT FK_TEST_ARTIFACTDTO_artifactDTOs_ARTIFACTPK FOREIGN KEY (artifactDTOs_ARTIFACTPK) REFERENCES ARTIFACTDTO (ARTIFACTPK)
ALTER TABLE TEST_ARTIFACTDTO ADD CONSTRAINT FK_TEST_ARTIFACTDTO_Test_TESTPK FOREIGN KEY (Test_TESTPK) REFERENCES TEST (TESTPK)
ALTER TABLE TEST_DESIGNPATTERNDTO ADD CONSTRAINT FK_TEST_DESIGNPATTERNDTO_designPatternDTOs_DESIGNPATTERNPK FOREIGN KEY (designPatternDTOs_DESIGNPATTERNPK) REFERENCES DESIGNPATTERNDTO (DESIGNPATTERNPK)
ALTER TABLE TEST_DESIGNPATTERNDTO ADD CONSTRAINT FK_TEST_DESIGNPATTERNDTO_Test_TESTPK FOREIGN KEY (Test_TESTPK) REFERENCES TEST (TESTPK)
ALTER TABLE TEST_PROGRAMMINGLANGUAGEDTO ADD CONSTRAINT FK_TEST_PROGRAMMINGLANGUAGEDTO_Test_TESTPK FOREIGN KEY (Test_TESTPK) REFERENCES TEST (TESTPK)
ALTER TABLE TEST_PROGRAMMINGLANGUAGEDTO ADD CONSTRAINT TSTPRGRMMNGLANGUAGEDTOprgrmmngLanguageDTOsPROGRAMMINGLANGUAGEPK FOREIGN KEY (programmingLanguageDTOs_PROGRAMMINGLANGUAGEPK) REFERENCES PROGRAMMINGLANGUAGEDTO (PROGRAMMINGLANGUAGEPK)
ALTER TABLE TEST_SOURCECODEDTO ADD CONSTRAINT FK_TEST_SOURCECODEDTO_sourceCodeDTOs_SOURCECODEPK FOREIGN KEY (sourceCodeDTOs_SOURCECODEPK) REFERENCES SOURCECODEDTO (SOURCECODEPK)
ALTER TABLE TEST_SOURCECODEDTO ADD CONSTRAINT FK_TEST_SOURCECODEDTO_Test_TESTPK FOREIGN KEY (Test_TESTPK) REFERENCES TEST (TESTPK)
ALTER TABLE TEST_TESTMETHODTYPEDTO ADD CONSTRAINT FK_TEST_TESTMETHODTYPEDTO_testMethodTypeDTOs_TESTMETHODTYPEPK FOREIGN KEY (testMethodTypeDTOs_TESTMETHODTYPEPK) REFERENCES TESTMETHODTYPEDTO (TESTMETHODTYPEPK)
ALTER TABLE TEST_TESTMETHODTYPEDTO ADD CONSTRAINT FK_TEST_TESTMETHODTYPEDTO_Test_TESTPK FOREIGN KEY (Test_TESTPK) REFERENCES TEST (TESTPK)
ALTER TABLE TEST_TESTTYPEDTO ADD CONSTRAINT FK_TEST_TESTTYPEDTO_testTypeDTOs_TESTTYPEPK FOREIGN KEY (testTypeDTOs_TESTTYPEPK) REFERENCES TESTTYPEDTO (TESTTYPEPK)
ALTER TABLE TEST_TESTTYPEDTO ADD CONSTRAINT FK_TEST_TESTTYPEDTO_Test_TESTPK FOREIGN KEY (Test_TESTPK) REFERENCES TEST (TESTPK)
ALTER TABLE SOURCECODEDTO_ARTIFACTDEPENDENCYDTO ADD CONSTRAINT SRCCDDTRTIFACTDEPENDENCYDTOrtfctDpndncyDTOsARTIFACTDEPENDENCYPK FOREIGN KEY (artifactDependencyDTOs_ARTIFACTDEPENDENCYPK) REFERENCES ARTIFACTDEPENDENCYDTO (ARTIFACTDEPENDENCYPK)
ALTER TABLE SOURCECODEDTO_ARTIFACTDEPENDENCYDTO ADD CONSTRAINT SOURCECODEDTO_ARTIFACTDEPENDENCYDTO_SourceCodeDTO_SOURCECODEPK FOREIGN KEY (SourceCodeDTO_SOURCECODEPK) REFERENCES SOURCECODEDTO (SOURCECODEPK)
ALTER TABLE REQUIREMENTS_FUNCTIONALREQUIREMENTDTO ADD CONSTRAINT RQRMNTSFNCTNLRQIREMENTDTOfnctnlRqrmntDTsFUNCTIONALREQUIREMENTPK FOREIGN KEY (functionalRequirementDTOs_FUNCTIONALREQUIREMENTPK) REFERENCES FUNCTIONALREQUIREMENTDTO (FUNCTIONALREQUIREMENTPK)
ALTER TABLE REQUIREMENTS_FUNCTIONALREQUIREMENTDTO ADD CONSTRAINT REQUIREMENTSFUNCTIONALREQUIREMENTDTORequirements_REQUIREMENTSPK FOREIGN KEY (Requirements_REQUIREMENTSPK) REFERENCES REQUIREMENTS (REQUIREMENTSPK)
ALTER TABLE REQUIREMENTS_INTERNATIONALIZATIONTYPEDTO ADD CONSTRAINT RQRMNTSNTRNTNLZTNTYPEDTOntrntnlztnTypDTsNTRNTIONALIZATIONTYPEPK FOREIGN KEY (internationalizationTypeDTOs_INTERNATIONALIZATIONTYPEPK) REFERENCES INTERNATIONALIZATIONTYPEDTO (INTERNATIONALIZATIONTYPEPK)
ALTER TABLE REQUIREMENTS_INTERNATIONALIZATIONTYPEDTO ADD CONSTRAINT RQUIREMENTSINTERNATIONALIZATIONTYPEDTORquirementsREQUIREMENTSPK FOREIGN KEY (Requirements_REQUIREMENTSPK) REFERENCES REQUIREMENTS (REQUIREMENTSPK)
ALTER TABLE REQUIREMENTS_NONFUNCTIONALREQUIREMENTDTO ADD CONSTRAINT RQUIREMENTSNONFUNCTIONALREQUIREMENTDTORquirementsREQUIREMENTSPK FOREIGN KEY (Requirements_REQUIREMENTSPK) REFERENCES REQUIREMENTS (REQUIREMENTSPK)
ALTER TABLE REQUIREMENTS_NONFUNCTIONALREQUIREMENTDTO ADD CONSTRAINT RQRMNTSNNFNCTNLRQRMNTDTOnnFnctnlRqrmntDTsNNFNCTNALREQUIREMENTPK FOREIGN KEY (nonFunctionalRequirementDTOs_NONFUNCTIONALREQUIREMENTPK) REFERENCES NONFUNCTIONALREQUIREMENTDTO (NONFUNCTIONALREQUIREMENTPK)
ALTER TABLE REQUIREMENTS_OPERATIONALSYSTEMTYPEDTO ADD CONSTRAINT REQUIREMENTSOPERATIONALSYSTEMTYPEDTORequirements_REQUIREMENTSPK FOREIGN KEY (Requirements_REQUIREMENTSPK) REFERENCES REQUIREMENTS (REQUIREMENTSPK)
ALTER TABLE REQUIREMENTS_OPERATIONALSYSTEMTYPEDTO ADD CONSTRAINT RQRMNTSPRTNLSYSTEMTYPEDTOprtnlSystmTypDTsPERATIONALSYSTEMTYPEPK FOREIGN KEY (operationalSystemTypeDTOs_OPERATIONALSYSTEMTYPEPK) REFERENCES OPERATIONALSYSTEMTYPEDTO (OPERATIONALSYSTEMTYPEPK)
ALTER TABLE REQUIREMENTS_USECASEDTO ADD CONSTRAINT FK_REQUIREMENTS_USECASEDTO_useCaseDTOs_USECASEPK FOREIGN KEY (useCaseDTOs_USECASEPK) REFERENCES USECASEDTO (USECASEPK)
ALTER TABLE REQUIREMENTS_USECASEDTO ADD CONSTRAINT FK_REQUIREMENTS_USECASEDTO_Requirements_REQUIREMENTSPK FOREIGN KEY (Requirements_REQUIREMENTSPK) REFERENCES REQUIREMENTS (REQUIREMENTSPK)
ALTER TABLE REQUIREMENTS_USERINTERFACEDTO ADD CONSTRAINT REQUIREMENTS_USERINTERFACEDTO_userInterfaceDTOs_USERINTERFACEPK FOREIGN KEY (userInterfaceDTOs_USERINTERFACEPK) REFERENCES USERINTERFACEDTO (USERINTERFACEPK)
ALTER TABLE REQUIREMENTS_USERINTERFACEDTO ADD CONSTRAINT FK_REQUIREMENTS_USERINTERFACEDTO_Requirements_REQUIREMENTSPK FOREIGN KEY (Requirements_REQUIREMENTSPK) REFERENCES REQUIREMENTS (REQUIREMENTSPK)
ALTER TABLE NONFUNCTIONALREQUIREMENTDTO_ARTIFACTDEPENDENCYDTO ADD CONSTRAINT NNFNCTNLRQRMNTDTRTFCTDPENDENCYDTOrtfctDpndncyDTsRTFCTDPNDENCYPK FOREIGN KEY (artifactDependencyDTOs_ARTIFACTDEPENDENCYPK) REFERENCES ARTIFACTDEPENDENCYDTO (ARTIFACTDEPENDENCYPK)
ALTER TABLE NONFUNCTIONALREQUIREMENTDTO_ARTIFACTDEPENDENCYDTO ADD CONSTRAINT NNFNCTNLRQRMNTDTRTFCTDPNDNCYDTNnFnctnlRqrmntDTNNFNCTNLRQRMENTPK FOREIGN KEY (NonFunctionalRequirementDTO_NONFUNCTIONALREQUIREMENTPK) REFERENCES NONFUNCTIONALREQUIREMENTDTO (NONFUNCTIONALREQUIREMENTPK)
ALTER TABLE IMPLEMENTATION_ARTIFACTDTO ADD CONSTRAINT FK_IMPLEMENTATION_ARTIFACTDTO_artifactDTOs_ARTIFACTPK FOREIGN KEY (artifactDTOs_ARTIFACTPK) REFERENCES ARTIFACTDTO (ARTIFACTPK)
ALTER TABLE IMPLEMENTATION_ARTIFACTDTO ADD CONSTRAINT FK_IMPLEMENTATION_ARTIFACTDTO_Implementation_IMPLEMENTATIONPK FOREIGN KEY (Implementation_IMPLEMENTATIONPK) REFERENCES IMPLEMENTATION (IMPLEMENTATIONPK)
ALTER TABLE IMPLEMENTATION_DESIGNPATTERNDTO ADD CONSTRAINT IMPLEMENTATION_DESIGNPATTERNDTO_Implementation_IMPLEMENTATIONPK FOREIGN KEY (Implementation_IMPLEMENTATIONPK) REFERENCES IMPLEMENTATION (IMPLEMENTATIONPK)
ALTER TABLE IMPLEMENTATION_DESIGNPATTERNDTO ADD CONSTRAINT IMPLEMENTATIONDESIGNPATTERNDTOdesignPatternDTOs_DESIGNPATTERNPK FOREIGN KEY (designPatternDTOs_DESIGNPATTERNPK) REFERENCES DESIGNPATTERNDTO (DESIGNPATTERNPK)
ALTER TABLE IMPLEMENTATION_PROGRAMMINGLANGUAGEDTO ADD CONSTRAINT MPLMENTATIONPROGRAMMINGLANGUAGEDTOmplementationIMPLEMENTATIONPK FOREIGN KEY (Implementation_IMPLEMENTATIONPK) REFERENCES IMPLEMENTATION (IMPLEMENTATIONPK)
ALTER TABLE IMPLEMENTATION_PROGRAMMINGLANGUAGEDTO ADD CONSTRAINT MPLMNTTNPRGRMMNGLANGUAGEDTOprgrmmngLnggDTsPROGRAMMINGLANGUAGEPK FOREIGN KEY (programmingLanguageDTOs_PROGRAMMINGLANGUAGEPK) REFERENCES PROGRAMMINGLANGUAGEDTO (PROGRAMMINGLANGUAGEPK)
ALTER TABLE IMPLEMENTATION_SOURCECODEDTO ADD CONSTRAINT FK_IMPLEMENTATION_SOURCECODEDTO_Implementation_IMPLEMENTATIONPK FOREIGN KEY (Implementation_IMPLEMENTATIONPK) REFERENCES IMPLEMENTATION (IMPLEMENTATIONPK)
ALTER TABLE IMPLEMENTATION_SOURCECODEDTO ADD CONSTRAINT FK_IMPLEMENTATION_SOURCECODEDTO_sourceCodeDTOs_SOURCECODEPK FOREIGN KEY (sourceCodeDTOs_SOURCECODEPK) REFERENCES SOURCECODEDTO (SOURCECODEPK)
ALTER TABLE IMPLEMENTATION_USERINTERFACEDTO ADD CONSTRAINT IMPLEMENTATIONUSERINTERFACEDTOuserInterfaceDTOs_USERINTERFACEPK FOREIGN KEY (userInterfaceDTOs_USERINTERFACEPK) REFERENCES USERINTERFACEDTO (USERINTERFACEPK)
ALTER TABLE IMPLEMENTATION_USERINTERFACEDTO ADD CONSTRAINT IMPLEMENTATION_USERINTERFACEDTO_Implementation_IMPLEMENTATIONPK FOREIGN KEY (Implementation_IMPLEMENTATIONPK) REFERENCES IMPLEMENTATION (IMPLEMENTATIONPK)
ALTER TABLE IMPLEMENTATION_WSDLDTO ADD CONSTRAINT FK_IMPLEMENTATION_WSDLDTO_wsdlDTOs_WSDLPK FOREIGN KEY (wsdlDTOs_WSDLPK) REFERENCES WSDLDTO (WSDLPK)
ALTER TABLE IMPLEMENTATION_WSDLDTO ADD CONSTRAINT FK_IMPLEMENTATION_WSDLDTO_Implementation_IMPLEMENTATIONPK FOREIGN KEY (Implementation_IMPLEMENTATIONPK) REFERENCES IMPLEMENTATION (IMPLEMENTATIONPK)
ALTER TABLE FUNCTIONALREQUIREMENTDTO_ARTIFACTDEPENDENCYDTO ADD CONSTRAINT FNCTNLRQRMNTDTRTFCTDEPENDENCYDTOrtfctDpndncyDTsRTFCTDPENDENCYPK FOREIGN KEY (artifactDependencyDTOs_ARTIFACTDEPENDENCYPK) REFERENCES ARTIFACTDEPENDENCYDTO (ARTIFACTDEPENDENCYPK)
ALTER TABLE FUNCTIONALREQUIREMENTDTO_ARTIFACTDEPENDENCYDTO ADD CONSTRAINT FNCTNLRQRMNTDTRTFCTDPNDENCYDTOFnctnlRqrmntDTFNCTNLREQUIREMENTPK FOREIGN KEY (FunctionalRequirementDTO_FUNCTIONALREQUIREMENTPK) REFERENCES FUNCTIONALREQUIREMENTDTO (FUNCTIONALREQUIREMENTPK)
ALTER TABLE DESIGN_ARTIFACTDTO ADD CONSTRAINT FK_DESIGN_ARTIFACTDTO_artifactDTOs_ARTIFACTPK FOREIGN KEY (artifactDTOs_ARTIFACTPK) REFERENCES ARTIFACTDTO (ARTIFACTPK)
ALTER TABLE DESIGN_ARTIFACTDTO ADD CONSTRAINT FK_DESIGN_ARTIFACTDTO_Design_DESIGNPK FOREIGN KEY (Design_DESIGNPK) REFERENCES DESIGN (DESIGNPK)
ALTER TABLE DESIGN_DESIGNPATTERNDTO ADD CONSTRAINT FK_DESIGN_DESIGNPATTERNDTO_Design_DESIGNPK FOREIGN KEY (Design_DESIGNPK) REFERENCES DESIGN (DESIGNPK)
ALTER TABLE DESIGN_DESIGNPATTERNDTO ADD CONSTRAINT FK_DESIGN_DESIGNPATTERNDTO_designPatternDTOs_DESIGNPATTERNPK FOREIGN KEY (designPatternDTOs_DESIGNPATTERNPK) REFERENCES DESIGNPATTERNDTO (DESIGNPATTERNPK)
ALTER TABLE DESIGN_USERINTERFACEDTO ADD CONSTRAINT FK_DESIGN_USERINTERFACEDTO_Design_DESIGNPK FOREIGN KEY (Design_DESIGNPK) REFERENCES DESIGN (DESIGNPK)
ALTER TABLE DESIGN_USERINTERFACEDTO ADD CONSTRAINT FK_DESIGN_USERINTERFACEDTO_userInterfaceDTOs_USERINTERFACEPK FOREIGN KEY (userInterfaceDTOs_USERINTERFACEPK) REFERENCES USERINTERFACEDTO (USERINTERFACEPK)
ALTER TABLE CLASSIFICATION_APPLICATIONSUBDOMAIN ADD CONSTRAINT CLSSFCTNPPLICATIONSUBDOMAINpplctnSbdmainsAPPLICATIONSUBDOMAINPK FOREIGN KEY (applicationSubdomains_APPLICATIONSUBDOMAINPK) REFERENCES APPLICATIONSUBDOMAIN (APPLICATIONSUBDOMAINPK)
ALTER TABLE CLASSIFICATION_APPLICATIONSUBDOMAIN ADD CONSTRAINT CLSSIFICATIONAPPLICATIONSUBDOMAINClassificationCLASSIFICATIONPK FOREIGN KEY (Classification_CLASSIFICATIONPK) REFERENCES CLASSIFICATION (CLASSIFICATIONPK)
ALTER TABLE CLASSIFICATION_PROJECTDTO ADD CONSTRAINT FK_CLASSIFICATION_PROJECTDTO_projectDTOs_PROJECTPK FOREIGN KEY (projectDTOs_PROJECTPK) REFERENCES PROJECTDTO (PROJECTPK)
ALTER TABLE CLASSIFICATION_PROJECTDTO ADD CONSTRAINT FK_CLASSIFICATION_PROJECTDTO_Classification_CLASSIFICATIONPK FOREIGN KEY (Classification_CLASSIFICATIONPK) REFERENCES CLASSIFICATION (CLASSIFICATIONPK)
ALTER TABLE ARTIFACTDTO_ARTIFACTDEPENDENCYDTO ADD CONSTRAINT RTFCTDTRTFACTDEPENDENCYDTOrtfctDpndencyDTOsARTIFACTDEPENDENCYPK FOREIGN KEY (artifactDependencyDTOs_ARTIFACTDEPENDENCYPK) REFERENCES ARTIFACTDEPENDENCYDTO (ARTIFACTDEPENDENCYPK)
ALTER TABLE ARTIFACTDTO_ARTIFACTDEPENDENCYDTO ADD CONSTRAINT FK_ARTIFACTDTO_ARTIFACTDEPENDENCYDTO_ArtifactDTO_ARTIFACTPK FOREIGN KEY (ArtifactDTO_ARTIFACTPK) REFERENCES ARTIFACTDTO (ARTIFACTPK)
ALTER TABLE ANALYSIS_ARTIFACTDTO ADD CONSTRAINT FK_ANALYSIS_ARTIFACTDTO_artifactDTOs_ARTIFACTPK FOREIGN KEY (artifactDTOs_ARTIFACTPK) REFERENCES ARTIFACTDTO (ARTIFACTPK)
ALTER TABLE ANALYSIS_ARTIFACTDTO ADD CONSTRAINT FK_ANALYSIS_ARTIFACTDTO_Analysis_ANALYSISPK FOREIGN KEY (Analysis_ANALYSISPK) REFERENCES ANALYSIS (ANALYSISPK)
ALTER TABLE ANALYSIS_USECASEDTO ADD CONSTRAINT FK_ANALYSIS_USECASEDTO_useCaseDTOs_USECASEPK FOREIGN KEY (useCaseDTOs_USECASEPK) REFERENCES USECASEDTO (USECASEPK)
ALTER TABLE ANALYSIS_USECASEDTO ADD CONSTRAINT FK_ANALYSIS_USECASEDTO_Analysis_ANALYSISPK FOREIGN KEY (Analysis_ANALYSISPK) REFERENCES ANALYSIS (ANALYSISPK)
ALTER TABLE ANALYSIS_USERINTERFACEDTO ADD CONSTRAINT FK_ANALYSIS_USERINTERFACEDTO_Analysis_ANALYSISPK FOREIGN KEY (Analysis_ANALYSISPK) REFERENCES ANALYSIS (ANALYSISPK)
ALTER TABLE ANALYSIS_USERINTERFACEDTO ADD CONSTRAINT FK_ANALYSIS_USERINTERFACEDTO_userInterfaceDTOs_USERINTERFACEPK FOREIGN KEY (userInterfaceDTOs_USERINTERFACEPK) REFERENCES USERINTERFACEDTO (USERINTERFACEPK)
ALTER TABLE WSDLDTO_ARTIFACTDEPENDENCYDTO ADD CONSTRAINT FK_WSDLDTO_ARTIFACTDEPENDENCYDTO_WsdlDTO_WSDLPK FOREIGN KEY (WsdlDTO_WSDLPK) REFERENCES WSDLDTO (WSDLPK)
ALTER TABLE WSDLDTO_ARTIFACTDEPENDENCYDTO ADD CONSTRAINT WSDLDTRTFACTDEPENDENCYDTOrtfctDpendencyDTOsARTIFACTDEPENDENCYPK FOREIGN KEY (artifactDependencyDTOs_ARTIFACTDEPENDENCYPK) REFERENCES ARTIFACTDEPENDENCYDTO (ARTIFACTDEPENDENCYPK)
CREATE SEQUENCE adjustment_generator START WITH 1
CREATE SEQUENCE functionalrequirement_generator START WITH 1
CREATE SEQUENCE tag_generator START WITH 1
CREATE SEQUENCE feedback_generator START WITH 1
CREATE SEQUENCE sourcecode_generator START WITH 1
CREATE SEQUENCE qualityinuse_generator START WITH 1
CREATE SEQUENCE assetstatetype_generator START WITH 1
CREATE SEQUENCE usage_generator START WITH 1
CREATE SEQUENCE wsdl_generator START WITH 1
CREATE SEQUENCE requirements_generator START WITH 1
CREATE SEQUENCE condition_generator START WITH 1
CREATE SEQUENCE classification_generator START WITH 1
CREATE SEQUENCE applicationsubdomain_generator START WITH 1
CREATE SEQUENCE asset_generator START WITH 1
CREATE SEQUENCE implementation_generator START WITH 1
CREATE SEQUENCE operationalsystemtype_generator START WITH 1
CREATE SEQUENCE artifactdependency_generator START WITH 1
CREATE SEQUENCE feedbackmessage_generator START WITH 1
CREATE SEQUENCE descriptorgroup_generator START WITH 1
CREATE SEQUENCE softwareproductquality_generator START WITH 1
CREATE SEQUENCE organization_generator START WITH 1
CREATE SEQUENCE softwarelicense_generator START WITH 1
CREATE SEQUENCE solution_generator START WITH 1
CREATE SEQUENCE userquerylog_generator START WITH 1
CREATE SEQUENCE programminglanguage_generator START WITH 1
CREATE SEQUENCE internationalizationtype_generator START WITH 1
CREATE SEQUENCE assettype_generator START WITH 1
CREATE SEQUENCE userinterfacetype_generator START WITH 1
CREATE SEQUENCE consumption_generator START WITH 1
CREATE SEQUENCE effort_generator START WITH 1
CREATE SEQUENCE designpattern_generator START WITH 1
CREATE SEQUENCE interfacespec_generator START WITH 1
CREATE SEQUENCE freeformdescriptor_generator START WITH 1
CREATE SEQUENCE applicationdomain_generator START WITH 1
CREATE SEQUENCE nonfunctionalrequirementtype_generator START WITH 1
CREATE SEQUENCE usecase_generator START WITH 1
CREATE SEQUENCE sourcecodetype_generator START WITH 1
CREATE SEQUENCE relatedasset_generator START WITH 1
CREATE SEQUENCE artifact_generator START WITH 1
CREATE SEQUENCE loguserlogin_generator START WITH 1
CREATE SEQUENCE test_generator START WITH 1
CREATE SEQUENCE user_generator START WITH 1
CREATE SEQUENCE artifactdependencytype_generator START WITH 1
CREATE SEQUENCE functionalrequirementtype_generator START WITH 1
CREATE SEQUENCE testmethodtype_generator START WITH 1
CREATE SEQUENCE analysis_generator START WITH 1
CREATE SEQUENCE nonfunctionalrequirement_generator START WITH 1
CREATE SEQUENCE relatedassettype_generator START WITH 1
CREATE SEQUENCE userinterface_generator START WITH 1
CREATE SEQUENCE testtype_generator START WITH 1
CREATE SEQUENCE design_generator START WITH 1
CREATE SEQUENCE project_generator START WITH 1
CREATE SEQUENCE assetidsequence_generator START WITH 1
CREATE SEQUENCE systemproperty_generator START WITH 1
CREATE SEQUENCE usercomment_generator START WITH 1
CREATE SEQUENCE parameter_generator START WITH 1
CREATE SEQUENCE operation_generator START WITH 1
CREATE SEQUENCE nonfunctionalrequirementtype_generator START WITH 1
CREATE SEQUENCE internationalizationtype_generator START WITH 1
CREATE SEQUENCE interfacespec_generator START WITH 1
CREATE SEQUENCE qualityinuse_generator START WITH 1
CREATE SEQUENCE assetidsequence_generator START WITH 1
CREATE SEQUENCE descriptorgroup_generator START WITH 1
CREATE SEQUENCE sourcecodetype_generator START WITH 1
CREATE SEQUENCE softwareproductquality_generator START WITH 1
CREATE SEQUENCE assettype_generator START WITH 1
CREATE SEQUENCE systemproperty_generator START WITH 1
CREATE SEQUENCE operationalsystemtype_generator START WITH 1
CREATE SEQUENCE test_generator START WITH 1
CREATE SEQUENCE effort_generator START WITH 1
CREATE SEQUENCE feedback_generator START WITH 1
CREATE SEQUENCE nonfunctionalrequirement_generator START WITH 1
CREATE SEQUENCE programminglanguage_generator START WITH 1
CREATE SEQUENCE artifactdependency_generator START WITH 1
CREATE SEQUENCE parameter_generator START WITH 1
CREATE SEQUENCE designpattern_generator START WITH 1
CREATE SEQUENCE asset_generator START WITH 1
CREATE SEQUENCE implementation_generator START WITH 1
CREATE SEQUENCE artifact_generator START WITH 1
CREATE SEQUENCE user_generator START WITH 1
CREATE SEQUENCE usage_generator START WITH 1
CREATE SEQUENCE userinterface_generator START WITH 1
CREATE SEQUENCE freeformdescriptor_generator START WITH 1
CREATE SEQUENCE feedbackmessage_generator START WITH 1
CREATE SEQUENCE consumption_generator START WITH 1
CREATE SEQUENCE usecase_generator START WITH 1
CREATE SEQUENCE assetstatetype_generator START WITH 1
CREATE SEQUENCE classification_generator START WITH 1
CREATE SEQUENCE usercomment_generator START WITH 1
CREATE SEQUENCE design_generator START WITH 1
CREATE SEQUENCE applicationdomain_generator START WITH 1
CREATE SEQUENCE organization_generator START WITH 1
CREATE SEQUENCE functionalrequirementtype_generator START WITH 1
CREATE SEQUENCE functionalrequirement_generator START WITH 1
CREATE SEQUENCE requirements_generator START WITH 1
CREATE SEQUENCE relatedassettype_generator START WITH 1
CREATE SEQUENCE analysis_generator START WITH 1
CREATE SEQUENCE testtype_generator START WITH 1
CREATE SEQUENCE sourcecode_generator START WITH 1
CREATE SEQUENCE relatedasset_generator START WITH 1
CREATE SEQUENCE operation_generator START WITH 1
CREATE SEQUENCE artifactdependencytype_generator START WITH 1
CREATE SEQUENCE wsdl_generator START WITH 1
CREATE SEQUENCE softwarelicense_generator START WITH 1
CREATE SEQUENCE applicationsubdomain_generator START WITH 1
CREATE SEQUENCE project_generator START WITH 1
CREATE SEQUENCE loguserlogin_generator START WITH 1
CREATE SEQUENCE testmethodtype_generator START WITH 1
CREATE SEQUENCE solution_generator START WITH 1
CREATE SEQUENCE userquerylog_generator START WITH 1
CREATE SEQUENCE userinterfacetype_generator START WITH 1
CREATE SEQUENCE condition_generator START WITH 1
CREATE SEQUENCE adjustment_generator START WITH 1
CREATE SEQUENCE tag_generator START WITH 1
